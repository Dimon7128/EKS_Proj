name: WeatherApp CI/CD

on:
  push:
    branches: [main]
    paths:
    - 'WeatherApp/**'
  pull_request:
    branches:
    - main
    paths:
    - 'WeatherApp/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set execute permissions for scripts
      run: chmod +x WeatherApp/app/CI_scripts/*.sh

    - name: Set environment variables
      run: WeatherApp/app/CI_scripts/set_env.sh
      env:
        KEY_API: ${{ secrets.KEY_API }}
        BG_COLOR: ${{ secrets.BG_COLOR }}

    - name: Write environment variables to .env file
      run: WeatherApp/app/CI_scripts/write_env.sh
      env:
        KEY_API: ${{ secrets.KEY_API }}
        BG_COLOR: ${{ secrets.BG_COLOR }}

    - name: Print working directory
      run: pwd

    - name: Print .env file for debugging
      run: cat .env

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: pip install -r WeatherApp/app/requirements.txt

    - name: Build Docker Image
      run: docker build -t myweatherapp:latest -f WeatherApp/deploy/Dockerfile .

    - name: List Docker Images
      run: docker images

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker Image with `latest` Tag
      run: |
        docker tag myweatherapp:latest ${{ secrets.DOCKER_USERNAME }}/myweatherapp:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/myweatherapp:latest

    - name: Save Docker Image Tag to File
      run: echo "latest" > image_tag.txt

    - name: Upload Image Tag and Helm Chart Files
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          image_tag.txt
          helm_charts_weatherapp/

    - name: List uploaded artifact files
      run: |
        echo "Uploaded artifacts:"
        ls -R image_tag.txt helm_charts_weatherapp

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      selenium:
        image: selenium/standalone-chrome
        ports:
        - 4444:4444

    steps:
    - uses: actions/checkout@v4

    - name: Download Build Files
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./downloaded_artifacts

    - name: Load Docker Image Tag
      run: echo "DOCKER_IMAGE_TAG=$(cat downloaded_artifacts/image_tag.txt)" >> $GITHUB_ENV

    - name: Run Docker container
      run: docker run -d -p 5000:5000 --name myweatherapp ${{ secrets.DOCKER_USERNAME }}/myweatherapp:latest

    - name: Wait for application to start
      run: sleep 15

    - name: Install Python Dependencies
      run: pip install pytest selenium webdriver-manager

    - name: Run Selenium tests with XVFB
      run: xvfb-run --server-args="-screen 0 1920x1080x24" pytest WeatherApp/app/test/test_weather_app.py

    - name: Stop and remove Docker container
      run: |
        docker stop myweatherapp
        docker rm myweatherapp

  bump_and_deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Download Build Files
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./downloaded_artifacts

    - name: Load Docker Image Tag
      run: echo "DOCKER_IMAGE_TAG=$(cat downloaded_artifacts/image_tag.txt)" >> $GITHUB_ENV

    - name: Bump version
      id: bump_version
      run: WeatherApp/app/CI_scripts/bump_version.sh
      env:
        GITHUB_ENV: $GITHUB_ENV

    - name: Commit and push new version
      run: WeatherApp/app/CI_scripts/commit_and_push_version.sh

    - name: Create tag
      run: WeatherApp/app/CI_scripts/create_git_tag.sh

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Tag and Push Docker Image with New Version
      run: |
        new_version=$(cat WeatherApp/app/VERSION)
        docker tag myweatherapp:latest ${{ secrets.DOCKER_USERNAME }}/myweatherapp:$new_version
        docker push ${{ secrets.DOCKER_USERNAME }}/myweatherapp:$new_version
