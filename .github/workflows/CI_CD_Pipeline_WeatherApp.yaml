name: WeatherApp CI/CD

on:
  push:
    branches: [main]
    paths:
    - 'WeatherApp/**'
  pull_request:
    branches:
    - main
    paths:
    - 'WeatherApp/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        pip install -r WeatherApp/app/requirements.txt

    - name: Lint with Flake8
      run: |
        pip install flake8
        flake8 WeatherApp/app/

    - name: Build Docker Image
      run: docker build -t myweatherapp:${{ github.sha }} -f WeatherApp/deploy/Dockerfile .

    - name: List Docker Images
      run: docker images

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Tag and Push Docker Image
      run: |
        docker tag myweatherapp:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/myweatherapp:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/myweatherapp:${{ github.sha }}

    - name: Save Docker Image Tag to File
      run: echo "${{ github.sha }}" > image_tag.txt

    - name: Upload Image Tag and Helm Chart Files
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          image_tag.txt
          helm_charts_weatherapp/

    - name: List uploaded artifact files
      run: |
        echo "Uploaded artifacts:"
        ls -R image_tag.txt helm_charts_weatherapp

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      selenium:
        image: selenium/standalone-chrome
        ports:
        - 4444:4444

    steps:
    - uses: actions/checkout@v4

    - name: Download Build Files
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./downloaded_artifacts

    - name: Load Docker Image Tag
      run: echo "DOCKER_IMAGE_TAG=$(cat downloaded_artifacts/image_tag.txt)" >> $GITHUB_ENV

    - name: Run Docker container
      run: docker run -d -p 5000:5000 --name myweatherapp ${{ secrets.DOCKER_USERNAME }}/myweatherapp:${{ env.DOCKER_IMAGE_TAG }}

    - name: Wait for a few seconds
      run: sleep 10

    - name: Install Python Dependencies
      run: pip install pytest selenium webdriver-manager

    - name: Run Selenium tests
      run: |
        cat <<EOF > WeatherApp/app/test/test_weather_app.py
        import pytest
        from selenium import webdriver
        from selenium.webdriver.chrome.service import Service as ChromeService
        from selenium.webdriver.chrome.options import Options
        from webdriver_manager.chrome import ChromeDriverManager

        @pytest.fixture(scope="module")
        def driver():
            options = Options()
            options.headless = True
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            service = ChromeService(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=options)
            yield driver
            driver.quit()

        def test_home_page(driver):
            driver.get("http://127.0.0.1:5000/")
            assert "WeatherApp" in driver.title

        def test_weather_search(driver):
            driver.get("http://127.0.0.1:5000/")
            search_box = driver.find_element("name", "user_input")
            search_box.send_keys("New York")
            search_box.submit()
            assert "Weather Forecast for New York" in driver.page_source

        def test_show_history(driver):
            driver.get("http://127.0.0.1:5000/history")
            assert "Search History" in driver.title
        EOF
        pytest WeatherApp/app/test/test_weather_app.py

    - name: Stop and remove Docker container
      run: |
        docker stop myweatherapp
        docker rm myweatherapp

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Download Build Files
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./downloaded_artifacts

    - name: Load Docker Image Tag
      run: echo "DOCKER_IMAGE_TAG=$(cat downloaded_artifacts/image_tag.txt)" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Pull Docker Image
      run: docker pull ${{ secrets.DOCKER_USERNAME }}/myweatherapp:${{ env.DOCKER_IMAGE_TAG }}

    # - name: Update Helm Chart and Deploy with ArgoCD
    #   run: |
    #     VERSION=${{ env.DOCKER_IMAGE_TAG }}
    #     helm upgrade --install myweatherapp ./downloaded_artifacts/helm_charts_weatherapp --set image.tag=$VERSION
    #     argocd app sync myweatherapp --revision $VERSION
